<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create a random number of helicopters depending of the level.
list = ds_list_create();
call_alarm = 0;
helicopter_id = noone;
width_back = sprite_get_width(spr_helicopter_perfil)/2; // Helicopter back.
if(room == game_tutorial) helicopter_num = 1;
// Create pos[i].x array.
//show_debug_message(helicopter_num);
for(var i = 0; i &lt; /*num_level + */helicopter_num; i++){
//    show_debug_message('create h');

    pos[i] = choose(-width_back, room_width + width_back);

    // Create helicopters.
    h[i] = instance_create(
                pos[i],
                irandom_range(50, 180),
                Helicoptero
       );
    
    with (h[i]) { spd = 0; }
    if(i == 0) with h[i] hsound = true;
       
    // Change image_xscale.
    if(pos[i] &gt;= room_width + width_back){ with(h[i]){ image_xscale = -1; } }
}

alarm[0] = 1;
/*for(var i = 0; i &lt; num_level + 5; i++){

    // Modify the pos[i].x array.
    if(pos[i] == -width_back) pos[i] -= i*50;
    else pos[i] += i*50;
    
    // Create helicopters.
    h[i] = instance_create(
                pos_x,
                irandom_range(0, 180),
                Helicoptero
       );
       
    // Change image_xscale.
    if(pos_x &gt;= room_width + width_back){ with(h[i]){ image_xscale = -1; } }
}*/

//follow = h[0];
//show_debug_message('pos[0]: ' + string(pos[0]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set speed to helicopters.
if(call_alarm &lt; /*num_level +*/ helicopter_num){
    with(h[call_alarm]){ spd = 4; }
    call_alarm++;
    alarm[0] = irandom_range(20,30);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check where the helicopters are.

// Check helicopters position every frame and change its variables if necessary.
//var list = instance_nearest_list(0, 0, Helicoptero);

// Check helicopter position.
/*for(var i = 0; i &lt; num_level + helicopter_num; i++){

    // If the instance exists.
    if(h[i] != "noone"){
    
        // If pos[i] less - equals than -width_back/2.
        if(pos[i] &lt;= -width_back/2){
            if(h[i] == "noone") break;
            if(h[i].x &gt;= room_width + width_back/2){
                pos[i] = room_width + width_back/2;
                Helicopter_Change(h[i]);     
            }
            
        // If pos[i] greater - equals than room_width + width_back/2
        }else if(pos[i] &gt;= room_width + width_back/2){
            if(h[i] == "noone") break;
            if(h[i].x &lt;= -width_back/2){         
                pos[i] = -width_back/2;
                Helicopter_Change(h[i]);
            }
        }
    }
}
    
    // Check helicopter position.
   /* for(var i = 0; i &lt; num_level + ds_list_size(list); i++){

        // If pos[i] less - equals than -width_back/2.
        if(pos[i] &lt;= -width_back/2){
            if(ds_list_find_value(list, i).x &gt;= room_width + width_back/2){
                pos[i] = room_width + width_back/2;
                Helicopter_Change(ds_list_find_value(list, i));     
            }
            
        // If pos[i] greater - equals than room_width + width_back/2
        }else if(pos[i] &gt;= room_width + width_back/2){
            if(ds_list_find_value(list, i).x &lt;= -width_back/2){         
                pos[i] = -width_back/2;
                Helicopter_Change(ds_list_find_value(list, i));
            }
        }
        
    }*/
    
  /*  with (follow) {
        show_debug_message('image_xsacle: ' + string(image_xscale));
        show_debug_message('speed: ' + string(hspeed));
        show_debug_message('x: ' + string(x));
      // show_debug_message('y: ' + string(y));
        show_debug_message(x);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
