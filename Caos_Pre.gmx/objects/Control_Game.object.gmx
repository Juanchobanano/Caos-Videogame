<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bola</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the inicial conditions of the game.
if(room == Room_Digital){
    globalvar num_level, available_buildings, piso_y, 
              xx_damage, yy_damage, vida_global, puntaje_global, 
              sound_retard, current_song, chances, best_score, 
              jugador, game_pause, tutorial_bool, idioma, puntaje_checkpoint,  
              end_game, game_completed, rate, regresar_menu, show_tuto, can_post, acelerar, 
              tiempo_trans, maquina;
              
    texture_set_interpolation(false);
    acelerar = false;
    tiempo_trans = 62;
    maquina = true; // MAQUINITA!!
    
    show_tuto = false;
    regresar_menu = false;
    rate = false;
    game_completed = false;
    end_game = false;
    can_post = false;
   // select_idioma = false;
  //  player_save = 0;
   // avance_edificios = ds_list_create(); // Importante!
    idioma = "es";
    tutorial_bool = false;
    game_pause = false;
    jugador = "";
    chances = 2;          
    current_song = 0;
    sound_retard = 0;
    vida_global = 100;
    puntaje_global = 1000;
    puntaje_checkpoint = 0;
    best_score = 1000;
    num_level = 0;
    //texture_set_interpolation(true);

    // Historia.
    globalvar historia, activar_tuto;
    historia = false;
    activar_tuto = true;
    
    // Variables de poderes.
    globalvar poderes_activados;
    poderes_activados = true;
    
    if(poderes_activados){
        globalvar c_billetes, c_bombas, c_bolsa, c_jeringa;
        c_billetes = 0;
        c_bombas = 0;
        c_jeringa = 0;
        c_bolsa = 0;
    }
    
    // Guardar el juego.
    globalvar save, gacha_select;
    save = true;
    gacha_select = 0;
    

    
    //if(file_exists(working_directory + "guardar_juego.sav")){
    
    /*if(instance_exists(Debugg)){
        file_delete(working_directory + "guardar_juego.sav");
        file_delete(working_directory + "game_complete.sav");
        file_delete(working_directory + "historia.sav");
        file_delete(working_directory + "puntaje.sav");
        file_delete(working_directory + "rate.sav");
        file_delete(working_directory + "checkpoint.sav");
        file_delete(working_directory + "idioma.sav");
        file_delete(working_directory + "can_post.sav");
        file_delete(working_directory + "acelerar.sav");
    }*/
    //}
    //save = false;
  //  historia = true;

    if(save){
        globalvar save_nivel, save_puntaje, gacha_select;
        save_nivel = 0;
        save_puntaje = 1000;
        
        if(file_exists(working_directory + "acelerar.sav")){
            ini_open(working_directory + "acelerar.sav");
            acelerar = ini_read_real("acelerar", "pass", 0);
            ini_close();
        }
        
        
        if(file_exists(working_directory + "idioma.sav")){
            ini_open(working_directory + "idioma.sav");
            idioma = ini_read_string("idioma", "pass", 0);
          //  select_idioma = ini_read_real("select_idioma", "pass", 0);
            ini_close();
        }
        if(maquina){ idioma = "es"; }
        
        // Puntaje cuando el jugador llegó al checkpoint.
        if(file_exists(working_directory + "checkpoint.sav")){
            ini_open(working_directory + "checkpoint.sav");
            puntaje_checkpoint = ini_read_real("checkpoint", "pass", 0);
            ini_close();
        }
        
        // Cant post (si el jugador no puede postear su puntaje en play store al final del juego).
        if(file_exists(working_directory + "can_post.sav")){
            ini_open(working_directory + "can_post.sav");
            can_post = ini_read_real("can_post", "pass", 0);
            ini_close();
        }
        
        if(file_exists(working_directory + "guardar_juego.sav")){
            ini_open(working_directory + "guardar_juego.sav");
            save_nivel = ini_read_real("save_nivel", "pass", 0);
            save_puntaje = ini_read_real("save_puntaje", "pass", 0);
            gacha_select = ini_read_real("gacha_select", "pass", 0);
            vida_global = ini_read_real("vida", "pass", 0);
            chances = ini_read_real("chances", "pass", 0);
          //  var str = ini_read_string("avance_edificios", "pass", "");
          //  ds_list_read(avance_edificios, str);
            ini_close();

        }
        
        // Cargar avance de edificios.
      /*  if(file_exists(working_directory + "avance_edificios.sav")){
            ini_open(working_directory + "avance_edificios.sav");
            var str = ini_read_string("avance_edificios", "pass", 0);
            ds_list_read(avance_edificios, str);
            chances = ini_read_real("chances", "pass", 0);
            ini_close();
        }*/
        
        if(file_exists(working_directory + "game_complete.sav")){
            ini_open(working_directory + "game_complete.sav");
            game_completed = ini_read_real("completed", "pass", 0);
            ini_close();
        }
        
        // Cargar historia.
        if(file_exists(working_directory + "historia.sav")){
            ini_open(working_directory + "historia.sav");
            historia = ini_read_real("historia", "pass", 0);
            ini_close();
        }
        
        // Si MAQUINA es true, historia true.
        if(maquina){ historia = true; }
        
        /*if(ds_list_empty(avance_edificios)){
            show_debug_message("HOLA K HACE");
        }else{  
            for(var i = 0; i &lt; ds_list_size(avance_edificios); i++){
                show_debug_message(ds_list_find_value(avance_edificios, i));
                
            }
        }*/
        
        num_level = save_nivel;
        //show_debug_message(num_level);
        puntaje_global = save_puntaje;
        
        
       // show_debug_message(num_level);
    }
    
    if(acelerar) tiempo_trans = 30;
    if(!file_exists(working_directory + "acelerar.sav")){
        ini_open(working_directory + "acelerar.sav");
        ini_write_real("acelerar", "pass", 1);
        ini_close();
    }
    
    //if(num_level &gt; 0) historia = false;
    
    // Connect to the Google Play Store.
    if(os_is_network_connected()){
        if(!achievement_login_status()){
            achievement_login();
        }
    }
    
    // Load data.
    if(file_exists(working_directory + "puntaje.sav")){
        ini_open(working_directory + "puntaje.sav");
        best_score = ini_read_real("puntaje", "pass", 0);
        ini_close();
    }
    
    
    xx_damage = 0;
    yy_damage = 0;
    available_buildings = 5;
   // num_level = 0;
    piso_y = 399;
    //room_goto(game1);
    instance_create(room_width/2, room_height/2, Digital);
    alarm[1] = tiempo_trans; //62
    instance_create(0, 0, Change_Soundtrack);
    instance_create(0,0, Reset_Game); // Resetear el juego cuando máquina es true.
    audio_play_sound(sn_soundtrack_pausa, 1, 1);
    //soundtrack = audio_play_sound(sn_soundtrack_1, 1, 1);

    
}else if(room == Room_Baius){

    instance_create(room_width/2, room_height/2, Baius);
    alarm[1] = tiempo_trans; // 62
    
}else if(room == Room_Alexander){
    alarm[1] = tiempo_trans;
    
}else if(room == Room_Menu){

    /*if(show_question("Seleccione Yes para Español o No para inglés")){
        idioma = "es";
    }else{
        idioma = "en";
    }*/
    

    // Tank animation.
    animator = 0;
    audio_sound_gain(sn_rage_music, 1, 1);
    audio_sound_gain(sn_roar, 1, 1);
    audio_sound_gain(sn_musica_intro, 1, 1);
        
    audio_stop_sound(sn_musica_intro);
    audio_stop_sound(sn_roar);
    audio_stop_sound(sn_rage_music);
    
    if(file_exists(working_directory + "rate.sav")){
        ini_open(working_directory + "rate.sav");
        rate = ini_read_real("rate", "pass", 0);
        ini_close();
    }
    
    
    if(game_completed and (os_type == os_android or os_type == os_ios)){
    
        // Para android solamente por ahora.
        if(!rate and os_type == os_android){
        
            if(idioma == "en"){ 
                var question = "We hope you are enjoying Caos! Please, rate us in the store :)!"; 
                shop_leave_rating(question, "¡Off Course!", "Maybe Later.", "https://play.google.com/store/apps/details?id=com.BaiusGames.Caos");
            }
            else if(idioma == "es"){ 
                var question = "¡Esperamos que estés disfrutando Caos! ¡Porfavor, valóranos en la tienda :)!"; 
                shop_leave_rating(question, "¡Por supuesto!", "En otro Momento.", "https://play.google.com/store/apps/details?id=com.BaiusGames.Caos");
            }
            
            /*if(show_question(question)){
                if(os_type == os_android){
                
                    url_open("https://play.google.com/store/apps/details?id=com.BaiusGames.Caos"); // Android
                }else if(os_type == os_ios){
                    url_open(""); // iOS.
                }
            }*/
            
            ini_open(working_directory + "rate.sav");
            ini_write_real("rate", "pass", 1);
            ini_close();
        }
        
        
    }
    
    if(regresar_menu){
        //audio_stop_all();
        /*audio_stop_sound(sn_soundtrack_1);
        audio_stop_sound(sn_soundtrack_2);
        audio_stop_sound(sn_soundtrack_3);
        audio_stop_sound(sn_soundtrack_4);
        audio_stop_sound(sn_soundtrack_5);
        audio_stop_sound(sn_soundtrack_final);
        Stop_Sounds();*/
        //show_debug_message("Regresar Menú");
        audio_stop_sound(sn_soundtrack_pausa);
        audio_play_sound(sn_soundtrack_pausa, 1, 1);
        //var s = string(audio_sound_get_gain(sn_soundtrack_pausa));
        //show_debug_message("Gain: " + s);
        audio_sound_gain(sn_soundtrack_pausa, 1, 1);
       // var s = string(audio_sound_get_gain(sn_soundtrack_pausa));
       // show_debug_message("Gain: " + s);
        regresar_menu = false;
    }

    /*if(audio_is_playing(sn_soundtrack_pausa)){
        
        show_debug_message("SONANAOWNOERASIGNWERS");
        audio_sound_get_gain(sn_soundtrack_pausa);
    }*/


  //audio_sound_gain(sn_soundtrack_pausa, 1, 2000);
    // Guardar muertes en el marcador.
   /* if (achievement_login_status() == false &amp;&amp; os_is_network_connected()){
        achievement_login();
        if(best_score != 0){
            achievement_post_score("CgkIga-DrZQVEAIQBg", best_score);
        }
    }else{
        //achievement_show_leaderboards();
        if(best_score != 0){
            achievement_post_score("CgkIga-DrZQVEAIQBg", best_score);
        }
    }*/
    
}else if(room == Room_Select){
    seleccionado = false;
    // Select character.
    change_color = 0;
    color_select = c_white;
    font = "";
    player_selected = 1; // para maquina --&gt; Pablo
}

/*   COSAS POR HACER:

HECHAS:
- Bajar de los edificios (hecho).
- Jump attack aside.
- Destroy advertising in floor.
- Barra de vida personalizada.
- Top collision.
- Tankes.
- Helicopteros.
- Controles.
- Destruir building.
- Objeto Damage.
- Helicopteros.
- Que el jugador se los coma.
- Soldados a pie.
- Cuando se caiga del edificio todo se destruye.
- Bug rooms de transición.
- Las personas salgan de las ventanas.
- Bajar a la mujer. 
- Mujer corriendo. 
- Can_Climb bug.
- Current_Sprite.
- Arreglar Going_Up_Checker();
- Arreglar Collapse.
- Rage (nivel 3).
- Win and Lose!
- Arreglar Gacha.
- Efectos de Sonido.
- Helicopteros Sonido.  
- Revisar Controles.
- Transicion entre niveles.
- Bug mujer.
- Poner el nivel en el que esta.
- Vidas.
- Puntaje.
- Daño enemigos. 
- Dificultad.
- Pausa con menú de pausa.
- Poderes:

      1.1 Caos. 
      1.2 Bombas 
      1.3 Bolsas.
      1.4 Jeringa.
- Guardar progreso de qué edficios ya ha destruído cuando muere.


      - FALTANTE -
      
    2. Controles.
    
    3. Historia.
       3.1 Introducción al principio.
       3.2 Final del juego.
    

       - Guardar progreso de qué edficios ya ha destruído cuando muere.

    5. Propósito del juego.
       - Ya no habrá un tutorial si no a medida de los niveles se le enseñará al jugador.
      
       
    Arreglar bug de no - generación de enemigos.
    Animación Final.
    

    Cambios en ingles
    
    

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change room.
if(room == Room_Digital){
    //room_goto(game_extra);

    room_goto_transition(Room_Baius, 0, 35);

}else if(room == Room_Baius){
    room_goto_transition(Room_Alexander, 0, 35);
    
}else if(room == Room_Alexander){
    room_goto_transition(Room_Menu, 0, 35);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tank animation.
var spr = spr_tank_idle;
var width = sprite_get_width(spr)*2;
var height = 437;
for(var i = 0; i &lt; 2; i++){ instance_create(-100+i*spr, height, Tank); }
alarm[0] = 30*7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message("puntaje_global: ");
//show_debug_message(num_level);

/*var key_space = keyboard_check_pressed(vk_space);
if(key_space){
    show_debug_message(historia);
}*/

var key_b = keyboard_check_pressed(ord("B"));
if(key_b){
    room_goto(game1);
}


var key_h = keyboard_check_pressed(ord("H"));
if(key_h){
    room_goto(Room_Select);
}



var key_j = keyboard_check_pressed(ord("J")); 
if(key_j){
    room_goto(game_intro);
}



var key_q = keyboard_check_pressed(ord("Q")); 
if(key_q){
    room_goto(game10);
    num_level = 9;
}



/*var key_r = keyboard_check_pressed(ord("R"));
if(key_r){
    game_restart();
}*/



/*var key_t = keyboard_check_pressed(ord("T"));
if(key_t){
    room_goto(Room_Prueba);
}*/


 
var key_w = keyboard_check_pressed(ord("W")); 
if(key_w){
    room_goto(game_final);
    audio_stop_sound(sn_soundtrack_pausa);
    num_level = 10;
}

/*var key_z = keyboard_check_pressed(ord("Z")); 
if(key_z){
    room_goto(Room_Transicion);
    tutorial_bool = true;
}*/

var key_o = keyboard_check_pressed(ord("O")); 
if(key_o){
    room_goto(Room_Creditos);
}

if(maquina and room == Room_Menu){


    var key_t = keyboard_check_pressed(ord("T")); //tutorial
    var key_p = keyboard_check_pressed(ord("P")); //pausa
    var key_l = keyboard_check_pressed(ord("L")); //climb
    
    var key_jump = keyboard_check_pressed(vk_space);
    var key_attack = keyboard_check_pressed(ord('X'));
    
    if(key_jump or key_attack or key_t or key_p or key_l){
        Play_Track("press_start");
        var sk = instance_create(0,0,Screen_Shake);
        with (sk) alarm[0] = 30; // Go to room next.
        mouse_clear(mb_left);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == Room_Menu and !place_meeting(mouse_x, mouse_y, Iconos)){ 
    Play_Track("press_start")
    var sk = instance_create(0,0,Screen_Shake);
    with (sk) alarm[0] = 30; // Go to room next.
    mouse_clear(mb_left);
}
//else{ if(room != Room_Select) room_goto_transition(Room_Menu, 0, 30); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw press to start.
var txt;
if(room == Room_Menu){ 

    if(animator &lt; 10){ // 25
        draw_set_color(c_white);
        draw_set_font(font_press_14);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);

        draw_text(
            room_width/2, 
            room_height/2 + 150, 
            "INSERT COIN"
        );
        draw_set_halign(noone);
        draw_set_valign(noone);
        animator++;
    
    }else{
        animator++;
        if(animator &gt;= 20){
            animator = 0; 
            if(idioma == "en") idioma = "es";
            else idioma = "en";
        }
    }
    

}


if(room == Room_Select){


    
    if(!maquina){
        Draw_Select();
    }else{
        Draw_Select_Maquina();
    }
}

if(keyboard_check_pressed(vk_space)){
    room_goto(game1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
