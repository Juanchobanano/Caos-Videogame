<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Textos.
i = 0;
if(idioma == "es"){
    txt[0] = "¡Encuentre a los niños destruyendo los edificios!"
    txt[1] = "Oprima las flechas         para moverse a los lados";
    txt[2] = "Oprima     para saltar";
    txt[3] = "Oprima     para subirse al edificio más cercano";
    txt[4] = "Oprima las flechas         para subir y bajar";//#                                del edificio";
    txt[5] = "Oprima     para destruir los edificios y los enemigos";
    txt[6] = "¡Recolecte poderes         para obtener recompensas!";
    txt[7] = "Oprima     para ver el tutorial nuevamente."
}else if(idioma == "en"){
    txt[0] = "¡Find the kids destroying the buildings!"
    txt[1] = "Press the keys          to move around";
    txt[2] = "Press      to jump";
    txt[3] = "Press      to climb the nearest building";
    txt[4] = "Press the keys          to go up and down";//#                       through the building";
    txt[5] = "Press      to destroy the buildings and the enemies";
    txt[6] = "Collect powers         in order to obtain rewards!";
    txt[7] = "Press     to see the tutorial again."

}
alpha = 0;
aparecer = true;
irse = false;
limit = array_length_1d(txt) - 1;


/*
grid = ds_grid_create(6, 4);

txt[0] = "Encuentre a los niños destruyendo los edificios!"

txt[1] = "Oprima las flechas @ para moverse a los lados";
ds_grid_add(grid, 1, 0, 0); // Flecha
ds_grid_add(grid, 1, 1, 0); // Flecha
ds_grid_add(grid, 1, 2, 90); // Rotación
ds_grid_add(grid, 1, 3, 270); // Rotación

txt[2] = "Oprima @ para saltar";
ds_grid_add(grid, 2, 0, 3); // Saltar
ds_grid_add(grid, 2, 1, ""); // 
ds_grid_add(grid, 2, 2, 0); // Rotación
ds_grid_add(grid, 2, 3, ""); // 

txt[3] = "Oprima @ para atacar o comerse a los enemigos";
ds_grid_add(grid, 3, 0, 4); // Atacar
ds_grid_add(grid, 3, 1, ""); // 
ds_grid_add(grid, 3, 2, 0); // Rotación
ds_grid_add(grid, 3, 3, ""); //

txt[4] = "Oprima @ para subirse al edificio más cercano";
ds_grid_add(grid, 4, 0, 5); // Climb
ds_grid_add(grid, 4, 1, ""); // 
ds_grid_add(grid, 4, 2, 0); // Rotación
ds_grid_add(grid, 4, 3, ""); //

txt[5] = "Oprima las flechas @ para moverse por el edificio";
ds_grid_add(grid, 5, 0, 0); // Flecha
ds_grid_add(grid, 5, 1, 0); // Flecha
ds_grid_add(grid, 5, 2, 0); // Rotación
ds_grid_add(grid, 5, 3, 180); // Rotación

// Llamar alarma
alarm[0] = 60;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(num_level == 1 and game_completed == 0 and !show_tuto){
    instance_activate_object(obj_ventana);
    show_tuto = true;
    with(Control_World){
        alarm[0] = 30; // Create tanks.
        alarm[1] = 30; // Create helicopters.
        alarm[2] = 30; // Create infloor - soldiers.
       // alarm[4] = 120;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( i &lt; limit ) i++; aparecer = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Irse = true;
irse = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(aparecer){
    if(alpha &lt;= 1){
        alpha += .05;
    }else{
        alpha = 1;
        aparecer = false;
        alarm[0] = 120;
    }
}else{
    if(irse){
        if(alpha &gt;= 0){
            alpha -= .05;
        }else{
            alpha = 0;
            irse = false;
            if( i &gt;= limit ) instance_destroy();
            alarm[1] = 30;
        }
    }
}

/*
if(!aparecer and !irse and !llamar_irse){
    llamar_irse = true;
    alarm[0] = 90;
}


if(irse){
    if(alpha &gt;= 1){
        alpha -= .01;
    }else{
        alpha = 0;
        irse = false;
        alarm[1] = 20;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw text with sprite.
//Add_Sprite(txt[i], grid, i);

draw_set_alpha(alpha);

draw_set_halign(fa_center);
draw_set_font(font_tutorial);

draw_set_alpha(alpha - .1);
draw_set_color(c_white);
draw_roundrect(room_width/2 - string_width(txt[i])/2 - 13, 130 - 26, room_width/2 + string_width(txt[i])/2 + 13, 130 + 20 + 13, 0);
draw_set_color(c_red);
draw_roundrect(room_width/2 - string_width(txt[i])/2 - 10, 130 - 23, room_width/2 + string_width(txt[i])/2 + 10, 130 + 20 + 10, 0);
//draw_rectangle(room_width/2 - string_width(txt[i])/2 - 10, 130 - 25, room_width/2 + string_width(txt[i])/2 + 10, 130 + 20 + 25, 1);
draw_set_alpha(alpha);
draw_set_color(c_white);
draw_text(room_width/2, 130, txt[i]);
//draw_set_color(c_black);
//draw_text(room_width/2, 130, txt[i]);
draw_set_halign(noone);

draw_set_color(c_white);

if(idioma == "es"){
    switch(i){
    
        case 1: // right left
            draw_sprite_ext(spr_botones, 0, room_width/2 - 70, 135, .6, .6, 90, c_white,alpha);
            draw_sprite_ext(spr_botones, 0, room_width/2 - 15, 135, .6, .6, 270, c_white,alpha);    
        break;   
        
        case 4: // down up
            draw_sprite_ext(spr_botones, 0, room_width/2 - 70 +40 , 135, .6, .6, 0, c_white,alpha);
            draw_sprite_ext(spr_botones, 0, room_width/2 - 15 +40, 135, .6, .6, 180, c_white,alpha);   
        break;
        
        case 2: // jump 
            draw_sprite_ext(spr_botones, 3, room_width/2 - 35, 135, .6, .6, 0, c_white,alpha);
        break;
        
        case 5: // attack
            draw_sprite_ext(spr_botones, 4, room_width/2 - 255, 135, .6, .6, 0, c_white,alpha);
        break;
        
        case 3: // climb
            draw_sprite_ext(spr_botones, 5, room_width/2 - 210, 135, .6, .6, 0, c_white,alpha);
        break;
        
        case 6: // poderes
            draw_sprite_ext(spr_power2_2, 0, room_width/2 - 80 -20, 125, .7, .7, 0, c_white,alpha);
            draw_sprite_ext(spr_power2_2, 1, room_width/2 - 55 - 20, 125, .7, .7, 0, c_white,alpha);
            draw_sprite_ext(spr_power2_2, 2, room_width/2 - 30 - 20, 125, .7, .7, 0, c_white,alpha);
            draw_sprite_ext(spr_power2_2, 3, room_width/2 - 5 -20, 125, .7, .7, 0, c_white,alpha);
        break;
        
        case 7: // tutorial
            draw_sprite_ext(spr_tutorial, 0, room_width/2 - 195-5, 120, .7, .7, 0, c_white,alpha);
        break;
        
    }
}else{

    switch(i){
    
        case 1: // right left
            draw_sprite_ext(spr_botones, 0, room_width/2 - 70 + 40, 135, .6, .6, 90, c_white,alpha);
            draw_sprite_ext(spr_botones, 0, room_width/2 - 15 + 40, 135, .6, .6, 270, c_white,alpha);    
        break;   
        
        case 4: // down up
            draw_sprite_ext(spr_botones, 0, room_width/2 - 70 + 20 , 135, .6, .6, 0, c_white,alpha);
            draw_sprite_ext(spr_botones, 0, room_width/2 - 15 + 20, 135, .6, .6, 180, c_white,alpha);   
        break;
        
        case 2: // jump 
            draw_sprite_ext(spr_botones, 3, room_width/2 - 20, 135, .6, .6, 0, c_white,alpha);
        break;
        
        case 5: // attack
            draw_sprite_ext(spr_botones, 4, room_width/2 - 245, 135, .6, .6, 0, c_white,alpha);
        break;
        
        case 3: // climb
            draw_sprite_ext(spr_botones, 5, room_width/2 - 165, 135, .6, .6, 0, c_white,alpha);
        break;
        
        case 6: // poderes
            draw_sprite_ext(spr_power2_2, 0, room_width/2 - 80 -20 - 45, 125, .7, .7, 0, c_white,alpha);
            draw_sprite_ext(spr_power2_2, 1, room_width/2 - 55 - 20 - 45, 125, .7, .7, 0, c_white,alpha);
            draw_sprite_ext(spr_power2_2, 2, room_width/2 - 30 - 20 - 45, 125, .7, .7, 0, c_white,alpha);
            draw_sprite_ext(spr_power2_2, 3, room_width/2 - 5 -20 -45, 125, .7, .7, 0, c_white,alpha);
        break;
        
        case 7: // tutorial
            draw_sprite_ext(spr_tutorial, 0, room_width/2 - 195-5+40, 120, .7, .7, 0, c_white,alpha);
        break;
        
    }

}
draw_set_alpha(1);

/*
3 jump
4 attack
5 climb
0 flecha
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
