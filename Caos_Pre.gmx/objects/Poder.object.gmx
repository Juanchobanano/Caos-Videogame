<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_powers2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Persona</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
list = ds_list_create();
image_speed = 0;
alarm[0] = 150;
image_xscale = .65;
image_yscale = .65;
get_father = false;
building_father = 0;

var rand = random_range(0,100);

if (rand &gt; 70){
    image_index = irandom_range(0,3);//(0,1,2,3);//billetes, bomba, bolsa de dinero, jeringa
}else {
    image_index = choose(4,5);
}



/*if(rand &gt; 50){
    image_index = 4; // carro
}else if(rand &gt; 40){
    image_index = 5;// cigarro
}*/


/*var rand = choose (1,1,1,3,3,3,3,3,5,5,5,5,5,5);
switch (rand){
    case 1: // Bomba.
        image_index = 4;
    break;
    case 2: // Coca
        image_index = 3;
    break;
    case 3: // Billete.
        if(billetes_times &gt; 0){
            billetes_times--;
            image_index = 2;
        }else{
            image_index = choose(4, 0);
        }
    break;
    case 4: // Porro
        image_index = 1;
    break;
    case 5: // Avion
        image_index = 0;
    break;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!get_father){
    
    // Create a list with buildings ids.
    var father_list = ds_list_create();
    father_list = instance_nearest_list(x, y, Edificio);
    
    // Get collision buildings.
  //  show_debug_message('here');
    for(var i = 0; i &lt; ds_list_size(father_list); i++){
        if(position_meeting(x, y, ds_list_find_value(father_list, i))){
            
          //  show_debug_message(string(id) + " - time: " + string(i));
          //  show_debug_message(ds_list_find_value(father_list, i));
            
            ds_list_add(list, ds_list_find_value(father_list, i));
        }
     }
    
    // Organize the list according to building's depth.
    if(ds_list_size(list) &gt; 1){
        if(ds_list_find_value(list, 0).depth &gt; ds_list_find_value(list, 1).depth){
            var temp = ds_list_find_value(list, 0);
            ds_list_replace(list, 0, ds_list_find_value(list, 1));
            ds_list_replace(list, 1, temp);
        }
    }
    
    // Set window's father.
    building_father = ds_list_find_value(list, 0);
    //with ds_list_find_value(list, 0) color = c_red;
   
    // Set new y.
   /* var diff = building_father.y - y;
    y = building_father.yy2 - diff;*/
    
    // Set depth.
    depth = building_father.depth - 1;
   
    // Set get father to true.
    get_father = true;
    
    
   // show_debug_message("i follow: " + string(building_father));
}

building_father = ds_list_find_value(list, 0);
//with building_father color = c_red;
if(building_father.is_ready){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
