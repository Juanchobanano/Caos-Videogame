<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tank_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create variables.
if(room == Room_Menu) spd = 2;
image_speed = .2
image_index = 0;
attack = false;
frecuency = 20;
sprite_index = spr_tank_attack;
out = 0;
distance = 0;
bullet = true;
x_creation = x;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set alarm to -1.
alarm[0] = -1;
var d = instance_create(x, y, Destrucion);
//with(d){ image_speed = 1; sprite_index = spr_destruction2; }
if(room != Room_Menu) Get_Score(x, y, 300, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack the player.
//show_debug_message('create bullet');
var corner = 0;
audio_play_sound(sn_bullets_tank, 1, 0);
if(sign(image_xscale) == 1) corner = bbox_right;
else corner = bbox_left; 
var bullet_ = instance_create(corner, bbox_top, Tank_Bullet);
with(bullet_){
    xscale = Tank.image_xscale;
    if(Tank.image_xscale == 1) image_index = 0;
    else image_index = 1; 
}
image_index = 1;
bullet = true;
attack = false;
distance = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tank mechanics.

// Player in angle [?]
if(image_xscale == 1){
    var corner = bbox_right; 
    var collision = collision_line(corner, bbox_top, corner + room_width, bbox_top - room_height, Player, 0, 0);
}else{ 
    var corner = bbox_left;
    var collision = collision_line(corner, bbox_top, corner - room_width, bbox_top - room_height, Player, 0, 0);
}

if(distance &lt;= 0){

    // Reset distance.
    distance = 0;

    if(!attack){
        // Set hspeed to spd.
        if(collision){ attack = true; exit; }
        spd = 2 * image_xscale;
        image_speed = .2;
    
    // Attack the player.
    }else{
    
        // Set hspeed in 0.
        spd = 0;
        
        // Player is too far away.
        if(!collision){
            attack = false;
        }
        
        //show_debug_message('bullet: ' + string(bullet));
        
        // Attack the player.
        if(bullet){ alarm[0] = irandom_range(25, 30); bullet = false; }
        
        // Set image speed and index to 0.
        image_index = 0;
        image_speed = 0;
        
    }
    
// Move back the tank.
}else{
   // show_debug_message('move back');
    self.x += image_xscale * -2;
    spd = 0;
    distance -= 2;
}

// Set hspeed in spd.
hspeed = spd;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Out variable.
if(x_creation &lt; room_width) out++;
else if(x_creation &gt; 0) out++;
if(out &gt; 1) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw collision line.
draw_self();

// Draw line.
/*draw_set_color(c_red);
if(image_xscale == 1){
  corner = bbox_right;
  draw_line_width(corner, bbox_top, corner + room_width, bbox_top - room_height, 2);
}else{
  corner = bbox_left;
  draw_line_width(corner, bbox_top, corner - room_width, bbox_top - room_height, 2);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
