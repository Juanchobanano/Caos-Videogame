<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_ground_normal_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>Player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Declare initial values.
//audio_play_sound(sn_roar, 1, 0);
// Save background.


// Controles.
controles = "windows";
//movepos_final = false;

// ROAR.
alarm[1] = 30; // Roar sound.
alarm[2] = 50; // Shake roar


// Position variables.
jumpspeed = 15;
movespeed = 5;
climb = false;
grav = 1; 
grounded = true;
move = 0;
climb_speed = 3;
hsp = 0;
vsp = 0;

// Hurt.
hurt = false;
count_hurt = 0;

// Control variables.
climbed_building = noone; // ID variable.
eat_person_id = noone; // ID variable.
same_place_counter = 0;// count same place attacks
y_anterior = 0;// save the Y position of the previous attack
same_place_counter2 = 0;// Attack_Other - count same place attacks
y_anterior2 = 0;// Attack_Other - save the Y position of the previous attack

// Life value.
if(num_level != 1) vida = vida_global; // 100
else vida = 100;

save_vida = 0;

// Constants values.
image_speed = 0;

// Score variable.
//score_global = puntaje_global; // Save the initial score before playing the level.
player_score = puntaje_global; // Get the current score.
save_level = false;


// Animation variables.
retard = 0;
diff = false;
retard_value = 4;

// Humor variable.
humor = "normal";
angry = 0;
humor_animation = false;
y_change = 0;
scale_change = 1;

// Lose state variable.
lose = false;

// Eat variables.
eating = false;

// Poderes.
globalvar poder_ate, billetes_times;
billetes_times = 1; // num_level
poder_ate = "normal";

// Women variables.
take_women = false;
w_index =0;

// STATE
state = Playing_State;

// Draw variables.
offset_x = 30;
offset_y = 30;
bar_width = sprite_get_width(spr_barra_vida); //  100;
bar_height = sprite_get_height(spr_barra_vida); // 20
join_text_time = 20;
    
// Declare controls.
key_up = 0;
key_left = 0;
key_right = 0;
key_jump = 0;
key_attack = 0;
key_down = 0;

//control touch
//cont_attack = 0;
//cont_jump = 0;
x_edificio = 0;
x_edificio_temp = 0;
w_edificio = 0;
ed_cont = 1;
ed_r = 0;
y1_ed = 0;
x1_ed = 0;

// Jump.
grounded = false;
hsp = 5 * image_xscale * -1;
vsp = -jumpspeed;
if(room == game10){ jugador = ""; }
var asset = asset_get_index("spr_player" + jugador + "_jump_" + humor + "_idle");
Current_Sprite(asset, 0, irandom_range(0,2));
limits = false;
roar = false;

// Draw score in middle.
draw_score = false;
score_var = 0;
font_score = font_game_13;
color_score = c_white;

// Barra vida index.
bar_index = 1;
dibujar_scores = true;

// Win variables.
if(vida == 0) vida = 10;
win = false;

// Dead time anim. (alarma 4).
dead_time = 5;
draw_player = true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(draw_player == 0) draw_player = 1;
else draw_player = 0;
alarm[4] = dead_time;
dead_time -= .5;
if(dead_time &lt;= 0){
    var p = instance_create(800, 200, Player);
    instance_destroy();
    with(p){ vida = 100; }
    with GameOver instance_destroy();
   // draw_score = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ir a la Ãºltima room.
room_goto_transition(game_final, 0, 150);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shake roar!
var sk = instance_create(0,0,Screen_Shake);
with(sk) { alarm[0] = 25; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Roar!
if(!end_game){
    audio_play_sound(sn_roar, 1, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room_goto Room Transition (Player dead).
chances--;
if(chances &lt; 0){
    room_goto_transition(Room_Menu, 0, 150);
    num_level = 0;
    chances = 2;
    regresar_menu = true;
    
    //var asset = Get_Soundtrack(num_level-1);
    //audio_sound_gain(asset, 0, 3000);
    
       
// Dead animation.
}else{
    alarm[4] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Mechanics.
script_execute(state);
// Apply movement.
x += hsp;
y += vsp;


//matener vida maxima como 100 y minima como 0
if vida &gt;=100{
    vida = 100;
}else if vida &lt;= 0{
    vida = 0
}

// Stop after destroying building_25
/*if(movepos_final){
    if(Player.x &lt; room_width/2){
        Player.controles = "windows";
        image_xscale = -1;
    }
}*/


// Create Damage overlay
if (vida &lt;=40){
    if (!instance_exists(Control_damage_overlay)){
        instance_create(0,0,Control_damage_overlay);
    }
}

// Powers up!
if(keyboard_check_released(ord("1"))){
    c_billetes = 3;
}else if(keyboard_check_released(ord("2"))){
    c_bombas = 3;
}else if(keyboard_check_released(ord("3"))){
    c_bolsa = 3;
}else if(keyboard_check_released(ord("4"))){
    c_jeringa = 3;
}

//Touch control

if (x_edificio != 0){
    if (abs(x_edificio - x) &lt; w_edificio-16 and key_left and ed_cont){
    //show_debug_message("HOla_D")
        key_up = 0;
        key_left = 1;
        key_right = 0;
        x_edificio_temp = x_edificio-32;
        //show_debug_message(x_edificio_temp)
        ed_cont = 0;
        ed_r = 1;
    }
    if(abs(x_edificio - x) &lt; 16 and key_right and ed_cont and !ed_r){
    //show_debug_message("HOla2_D")
        key_up = 0;
        key_left = 0;
        key_right = 1;
        x_edificio_temp = x_edificio+w_edificio+32;
        //show_debug_message(x_edificio_temp)
        ed_cont = 0;
    }
    if(!ed_cont){
    //show_debug_message("2HOla_D")
        if(x_edificio_temp != 0 and abs(x_edificio_temp - x) &lt;8){
        //show_debug_message("3HOla_D")
        x_edificio_temp = 0;
        ed_cont = 1;
        }
    }
    
    if(ed_cont){
        if (x_edificio &lt; x){
            key_left = 1;
            key_right = 0;
            key_up = 0;
            if (abs(x_edificio - x) &lt; w_edificio+32){
                key_up = 1;
            }else{
                key_up = 0;
            }
        }else if ((x_edificio + w_edificio/2) &gt; x){
            key_right = 1;
            key_left = 0;
            key_up = 0;
            if (abs(x_edificio - x) &lt; 32){
                key_up = 1;
            }else{
                key_up = 0;
            }
    }
    }
    if (!grounded and y &lt; 342){
        key_up = 0;
        key_left = 0;
        key_right = 0;
        x_edificio = 0;
        w_edificio = 0;
        ed_r = 0;
    }
    if (y &lt; 406 and yprevious == y){
        key_up = 0;
        key_left = 0;
        key_right = 0;
        x_edificio = 0;
        w_edificio = 0;   
        ed_r = 0;
    }  
    
}
if (key_attack){
    key_attack = 0;
}

/*c_bombas = 3;
    c_bolsa = 3;
    c_jeringa = 3;

//show_debug_message(vida);
/*show_debug_message(x);
show_debug_message(y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save vida and puntaje global.
if(!lose){
    vida_global = vida;
}
puntaje_global = player_score;
/*else{
    puntaje_global = score_global; // The player won't get score.
}*/

// Change best score file.
if(win and !save_level){
    save_level = true;
    
    if(puntaje_global &gt; best_score){
         best_score = puntaje_global;
         file_delete(working_directory + "puntaje.sav");
         ini_open(working_directory + "puntaje.sav");
         ini_write_real("puntaje", "pass", best_score);
         ini_close();
    }
    
    // Save nivel.
    if(save){
        save_nivel = num_level;
        save_puntaje = puntaje_global;
        if(file_exists(working_directory + "guardar_juego.sav")){
            file_delete(working_directory + "guardar_juego.sav");
        }
        ini_open(working_directory + "guardar_juego.sav");
        ini_write_real("save_nivel", "pass", save_nivel);
        ini_write_real("save_puntaje", "pass", save_puntaje);
        if(num_level == 5){
            ini_write_real("gacha_select", "pass", 1);
        }
        ini_close();
    }
       
    // Save game completed.
    if(room == game10){
        if(file_exists(working_directory + "game_complete.sav")){
            file_delete(working_directory + "game_complete.sav");
        }
        game_completed = 1;
        ini_open(working_directory + "game_complete.sav");
        ini_write_real("completed", "pass", 1);
        ini_close();
    }
    
}

// Save avance edificios.
/*if(save){
    if(lose){
        for(var i = 0; i &lt; ds_list_size(avance_edificios); i++){
            show_debug_message(ds_list_find_value(avance_edificios, i));
            
        }
        if(file_exists(working_directory + "avance_edificios.sav")){
            file_delete(working_directory + "avance_edificios.sav");
        }
        ini_open(working_directory + "avance_edificios.sav");
        var str = ds_list_write(avance_edificios);
        ini_write_string("avance_edificios", "pass", str);
        ini_write_real("chances", "pass", chances);
        //chances = ini_read_real("chances", "pass", 0);
        //show_debug_message("save edificos progress");
        ini_close();
              
    }
}

/*show_debug_message("sWTFFSEF");
ini_open(working_directory + "avance_edificios.sav");
var str = ini_read_string("avance_edificios", "pass", "");
var list = ds_list_create();
ds_list_read(list, str);
for(var i = 0; i &lt; ds_list_size(list); i++){
    show_debug_message(ds_list_find_value(list, i));
    
}
ini_close();
//show_debug_message(save_nivel);
//show_debug_message(save_puntaje);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> /// Draw players data.
 
// Set configurations.
draw_set_font(font_game_13);

// Draw Scores.
if(room != game_intro and dibujar_scores){

    // Player 1.
    var score_1 = string(player_score);
    var height = string_height(score_1);
    var width = string_width(score_1);
    
    // Draw player 1 bar.
  //  if(room != game_tutorial){
    
        if(humor == "normal"){
            draw_sprite(
                spr_barra_vida, 
                0, 
                offset_x, 
                offset_y
            );
            
            draw_sprite_part(
                spr_barra_vida, 
                bar_index, // 1 
                0,
                0,
                vida * (bar_width/100), 
                bar_height, 
                offset_x, 
                offset_y, 
            );
            
        }else{
        
            draw_sprite(
                spr_barra_vida, 
                0, 
                offset_x, 
                offset_y
            );
            
            draw_sprite_part(
                spr_barra_vida, 
                1, 
                0,
                0,
                vida * (bar_width/100), 
                bar_height, 
                offset_x, 
                offset_y
            );
        }
            
            // Draw word "damage"
            draw_set_color(c_black);
            draw_set_font(font_game_13);
            draw_text_outlined(
                offset_x + 10, 
                offset_y + 8, 
                "DAMAGE", 
                c_white, 
                c_black,
                2
            );
            
            
            // Draw Score.
            draw_set_color(make_colour_rgb(0, 254, 255));
            draw_text_outlined(
                offset_x+3, 
                offset_y - string_height("SCORE:"), 
                "SCORE:",
                c_white, /*make_color_rgb(0, 254, 255),*/
                c_black, 
                2
            );
            
       //     draw_set_font(font_score);
         
            
            
            draw_text_outlined(
                offset_x + bar_width - string_width(score_1), 
                offset_y - string_height(score_1), 
                score_1, 
                c_white, /*make_colour_rgb(0, 254, 255), */
                c_black, 
                2
            );
            
     
      //      draw_set_font(font_game_13);
            
            // Draw rage bar.
            draw_sprite(
                spr_barra_vida, 
                2, 
                offset_x, 
                offset_y + sprite_get_height(spr_barra_vida) + 5
            );
            
            draw_sprite_part(
                spr_barra_vida, 
                3, 
                0,
                0,
                angry * (bar_width/100), 
                bar_height, 
                offset_x, 
                offset_y + sprite_get_height(spr_barra_vida) + 5
            );
            
            // Draw word "caos"
            draw_set_color(c_black);
            draw_set_font(font_game_10);
            draw_text_outlined(
                offset_x + 10, 
                offset_y + 8 + sprite_get_height(spr_barra_vida), 
                "CAOS", 
                c_white, /*make_color_rgb(215,0, 46),*/ 
                c_black, 
                2
                
            );
        
            
            // Draw chances.
            for(i = 0; i &lt; 2 /*3*/; i++){
                draw_sprite_ext(
                    asset_get_index("spr_player"+jugador+"_face"),
                    0, 
                    670 - (i *50),
                    50, 
                    1,
                    1, 
                    0, 
                    c_black, 
                    0.4
                )
            }
            
            for (i = 0; i &lt; chances /*+ 1*/; i++)
            {
                draw_sprite(
                    asset_get_index("spr_player"+jugador+"_face"),
                    0, 
                    670 - (i*50),
                    50
                );
            }
}
      //  }
        
        
    // Draw player 2 bar.
      /*  draw_sprite(
            spr_barra_vida, 
            2, 
            room_width/2 - bar_width/2,
            offset_y
        );
        
        draw_sprite_part(
            spr_barra_vida, 
            3, 
            0,
            0,
            100 * (bar_width/100), 
            bar_height, 
            room_width/2 - bar_width/2, 
            offset_y
        );
        
        if(join_text_time &lt; 0){
            draw_set_color(make_color_rgb(122, 204, 0));
            var join = "JOIN  IN  NOW";
            draw_text(
                room_width/2 - string_width(join)/2,
                offset_y - string_height(join), 
                join
            );
            if(join_text_time &lt; -20){
                join_text_time = 20;
            }else{
                join_text_time -= 1;
            }
        }else{
            join_text_time -= 1;
        }
    
    // Draw player 3 bar.
        draw_sprite(
            spr_barra_vida, 
            4, 
            room_width - offset_x - sprite_get_width(spr_barra_vida), 
            offset_y
        );
        
        draw_sprite_part(
            spr_barra_vida, 
            5, 
            0,
            0,
            100 * (bar_width/100), 
            bar_height, 
            room_width - offset_x - sprite_get_width(spr_barra_vida), 
            offset_y
        );*/
        
        /*if(join_text_time &lt; 0){
            draw_set_color(make_color_rgb(204, 0, 41));
            var join = "JOIN  IN  NOW";
            draw_text(
                room_width - offset_x - sprite_get_width(spr_barra_vida)/2 - string_width(join)/2,
                offset_y - string_height(join), 
                join
            );
            if(join_text_time &lt; -20){
                join_text_time = 20;
            }else{
                join_text_time -= 1;
            }
        }else{
            join_text_time -= 1;
        }*/

// Draw women.
if(take_women){

    if(image_xscale == 1) var xx1 = bbox_left - 7; // left;
    else xx1 = bbox_right - sprite_get_width(spr_women_inbuilding) + 10; // right

    // Climbed.
    if(climb){  
        draw_sprite(
            spr_women_inhand, 
            image_index/2, 
            xx1, 
            y - 22
        );
    }else{
        // Jumping.
        if(!grounded){
            draw_sprite(
                spr_women_inhand, 
                image_index/2, 
                xx1, 
                y - 22
            );
        }
    }
}

// Draw the player.
if(draw_player) draw_self();


if(hurt and !lose){
    if(count_hurt &lt; 2){
        //var color_red = make_color_hsv(make_colour_rgb(255, 182, 35), 200, 255);
        
        var color_red = make_colour_rgb(254, 102, 29);
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, 1, 0, color_red, 1);
        

        
        count_hurt++;
    }else{
        count_hurt++;
        if(count_hurt &gt; 4){
           var color_red = make_colour_rgb(254, 102, 29);
            
           // var color_red = make_color_hsv(make_colour_rgb(255, 182, 35), 200, 255);
            draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, 1, 0, color_red, 1);
            

            if(count_hurt &gt; 6){
                hurt = false;
                count_hurt = 0;
            }
        }
    }
}
    

// Draw score in the middle.
if(draw_score){

    draw_set_halign(fa_center);
    draw_set_valign(fa_center);  
    draw_set_font(font_04b11_30); 
    var color_bk = make_color_rgb(51, 51, 102);
    
    // Perdiste.
    if(state == Lose_State){
        var color_cl = make_color_rgb(51, 255, 255);
        var color_os = make_color_rgb(0, 204, 153);
         
    // Coronaste.
    }else{
        var color_cl = make_color_rgb(51, 204, 255);
        var color_os = make_color_rgb(51,102,153); 
    }
    
    if(score_var &lt;= 4){
        score_var++;
        var scores = string(player_score);
        draw_text_outlined(room_width/2, room_height/2 + 35, scores, color_cl, color_bk, 3);
        
     }else{
        score_var++;
        if(score_var &gt;= 10){
            score_var = 0;
        }
    }

    draw_set_halign(noone);
    draw_set_valign(noone);   
}


/*for(var i = 0; i &lt; chances + 1; i++){
    draw_sprite(
        asset_get_index("spr_player"+jugador+"_face"), 
        0,
        600 +(i*60),
        50
    );
}*/


//if(image_index == 1){
/*draw_set_color(c_blue);
    if(image_xscale == 1){
        draw_circle(
            Player.bbox_left , Player.y + 48, 
            5, 
            1
        );
    }else{
        draw_circle(
            Player.bbox_right , Player.y + 48, 
            5, 
            1
        );
    }
draw_set_color(c_white);
//}else{

//}



/*if(climb and key_attack){
    switch(image_xscale){
    
        // Left.
        case 1:
            draw_rectangle(bbox_left - 15, y - 2, Player.x, y + 16, 1);
        break;
        
        // Right.
        case -1:
            draw_rectangle(bbox_right + 15, y - 2, Player.x, y + 16, 1);
        break;
    }
}


//if(image_xscale == 1) draw_rectangle(x - 4, y - 80, x + 18, y - 18, 0);
//else draw_rectangle(x + 4, y - 80, x - 18, y - 18, 0);

//if(image_xscale == 1) draw_rectangle(x - 36, y + 25, x - 10, y + 47, 0);
//else draw_rectangle(x + 36 , y + 25, x + 10, y + 47, 0);


/*with(Building_4){
    for(var i = 0; i &lt; ds_grid_width(damage_grid); i++){

        if(ds_grid_get(damage_grid, i, 0) != ""){
            draw_rectangle_colour(
                  ds_grid_get(damage_grid, i, 0)+6,
                  Building_4.y - ds_grid_get(damage_grid, i, 1)+6, 
                  ds_grid_get(damage_grid, i, 0) + sprite_get_width(spr_building_damage)-6,
                  Building_4.y - ds_grid_get(damage_grid, i, 1) + sprite_get_height(spr_building_damage)-6, 
                  c_white, 
                  c_white, 
                  c_white,
                  c_white, 
                  1
            );
        }
        
  /*      draw_set_color(c_white);
        draw_circle(
            ds_grid_get(damage_grid, i, 0) + sprite_get_width(spr_building_damage), 
            Building_4.y - ds_grid_get(damage_grid, i, 1) + sprite_get_height(spr_building_damage), 
            5, 
            0
        ); */
        
  //  }
//}

/*if(climbed_building != noone){
    draw_set_alpha(.5);
    var cb = climbed_building;
    draw_rectangle(
        cb.x, 
        cb.y,
        cb.x + cb.sprite_width,
        cb.y - cb.sprite_height, 
        false
    )
    draw_set_alpha(1);
    
    if(image_xscale == 1) var second_building = instance_nearest(bbox_left, bbox_bottom, Edificio);
    else var second_building = instance_nearest(bbox_right, bbox_bottom, Edificio);   
    draw_set_alpha(.5);
    var cb = second_building;
    draw_set_color(c_blue);
    draw_rectangle(
        cb.x, 
        cb.y,
        cb.x + cb.sprite_width,
        cb.y - cb.sprite_height, 
        false
    )
    draw_set_alpha(1);
    draw_set_color(c_white);
}
    
   /* draw_healthbar(
        offset_x, 
        offset_y, 
        offset_x + bar_width, 
        offset_y + bar_height, 
        vida, 
        c_black, 
        c_green, 
        c_green, 
        0, 
        true, 
        false
    );

    draw_set_color(c_green);
    draw_text(offset_x + bar_width - width, offset_y - height, txt);
    draw_text(offset_x + 2, offset_y + 2, "DAMAGE");
    */
    
    // Player 2.
   /* draw_set_color(c_red);
    var xx = room_width/2 - bar_width/2;
    draw_text(xx, offset_y - height, "JOIN IN NOW");
    draw_text(xx, offset_y + 2, "JOIN IN NOW"); */
     
   /* draw_sprite(
        spr_barra_vida, 
        0, 
        xx + offset_x + bar_width - width, 
        offset_y - height
    );
    
    // Player 3.
    draw_set_color(c_blue);
    var xx = room_width - offset_x - bar_width;
    
    draw_sprite(
        spr_barra_vida, 
        0, 
        xx + offset_x + bar_width - width, 
        offset_y - height
    ); */
    
    /*
    draw_text(xx, offset_y - height, "0");
    draw_text(xx, offset_y + 2, "JOIN IN NOW");
    */
    
// Draw line.
/*if(climbed_building != noone){
   if(image_xscale == 1) draw_line_width(Player.x, Player.y+17, climbed_building.bbox_right, climbed_building.y - sprite_get_height(climbed_building.sprite_index), 2);
   else draw_line_width(Player.x, Player.y+17, climbed_building.bbox_left, climbed_building.y - sprite_get_height(climbed_building.sprite_index), 2);
 
}*/

// Draw climb line.
/*if(instance_number(Edificio) &gt; 0){
    draw_set_color(c_green);
    switch(image_xscale){
        case -1:
            var building = instance_nearest(bbox_right, bbox_bottom, Edificio);
            draw_line_width(x + 23, y, building.bbox_left, y, 2);
        break;
        case 1:
            var building = instance_nearest(bbox_left, bbox_bottom, Edificio);
            draw_line_width(x - 23, y, building.bbox_right, y,2);
        break;
    }
}
 
// Draw Return Climb line.
/*draw_set_color(c_red);
if(grounded and climbed_building != noone){
    switch(image_xscale){
        case -1:
            var building = instance_nearest(bbox_right, bbox_bottom, Edificio);
            draw_line_width(x - 23, y, climbed_building.bbox_right, climbed_building.bbox_top, 2);
        break;
        case 1:
            var building = instance_nearest(bbox_left, bbox_bottom, Edificio);
            draw_line_width(x + 23, y, climbed_building.bbox_left, climbed_building.bbox_top, 2);
        break;
    }
}*/

/*var rango = 7;
var lista = ds_list_create();
var lista2 = ds_list_create();
var lista3 = ds_list_create();

lista = instance_nearest_list(x, y, Edificio);
var building = instance_nearest(x, bbox_bottom, Edificio);


// Player is in the ground.
/*
if(grounded){
    switch(image_xscale){
        // Derecha.
        case -1:
        
            //var building = instance_nearest(bbox_right, bbox_bottom, Edificio);
           
            // Set grid.
            for(var i = 0; i &lt; ds_list_size(lista); i++){
                if(ds_list_find_value(lista, i).x &gt; Player.x){
                    ds_list_add(lista2, ds_list_find_value(lista, i));
                }
            }
            
            // Organize grid.
            if(ds_list_size(lista2) &gt; 1){
              //  for(var j = 0; j &lt; ds_list_size(lista2); j++){
                    for(var i = 0; i &lt; ds_list_size(lista2); i++){
                        if(!Value_Exists(ds_list_find_value(lista2, i + 1))) break;  
                        if(ds_list_find_value(lista2, i).x &gt; ds_list_find_value(lista2, i+1).x){
                            var temp = ds_list_find_value(lista2, i);
                            ds_list_replace(lista2, i, ds_list_find_value(lista2, i + 1));
                            ds_list_replace(lista2, i + 1, temp);
                        }                   
                    }
            //    }
                with Edificio color = c_white;
                var building = ds_list_find_value(lista2, 0);
                with building color = c_red; 
            }
            //show_debug_message(ds_list_find_value(lista2, 0));
                       

            // Can climb.
            if(ds_list_size(lista) &gt; 0){
                if(building.building_life &lt;= 0) exit;
                if(point_distance(x + 23, y, building.bbox_left, y) &lt;= rango){
                    if(key_up and grounded and y &gt;= 363){
                        draw_line(x + 23, y, building.bbox_left, y);
                    }
                }
                ds_list_destroy(lista);
                ds_list_destroy(lista2);
            }
            
        break;
        
        // Izquierda.
        case 1:           
        
            
           //var building = instance_nearest(bbox_left, bbox_bottom, Edificio);
           
           // Set grid.
           for(var i = 0; i &lt; ds_list_size(lista); i++){
                if(ds_list_find_value(lista, i).bbox_right &lt; Player.x){
                    ds_list_add(lista2, ds_list_find_value(lista, i));
                }
            }
            
        
            // Organize grid.
            if(ds_list_size(lista2) &gt; 1){
            //    for(var j = 0; j &lt; ds_list_size(lista2); j++){
                    for(var i = 0; i &lt; ds_list_size(lista2); i++){
                        if(!Value_Exists(ds_list_find_value(lista2, i + 1))) break;  
                        if(ds_list_find_value(lista2, i).bbox_right &gt; ds_list_find_value(lista2, i+1).bbox_right){
                            var temp = ds_list_find_value(lista2, i);
                            ds_list_replace(lista2, i, ds_list_find_value(lista2, i + 1));
                            ds_list_replace(lista2, i + 1, temp);
                        }                   
                    }
              //  }
                
                with Edificio color = c_white;
                var building = ds_list_find_value(lista2, 0);
                with building color = c_red; 
            }
           
        

                            
             // Can climb.
            if(ds_list_size(lista) &gt; 0){
                if(building.building_life &lt;= 0) exit;
                if(point_distance(x - 23, y, building.bbox_right, y) &lt; rango){
                    draw_line(x + 23, y, building.bbox_left, y);
                
                }
                ds_list_destroy(lista);
                ds_list_destroy(lista2);
            }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hurt = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(jugador == "") jugador = "2";
else jugador = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(Room_Select);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
